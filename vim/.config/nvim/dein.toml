# deinでのプラグイン管理について (https://leico.github.io/TechnicalNote/VimR/VimR-dein-toml
# それっぽくするforPHP (https://qiita.com/crarrry/items/3e3f08d8c9b6c9daed11
# TOML仕様解説jp (https://gist.github.com/minoritea/acde44feae7127c89873

[[plugins]]
repo = 'Shougo/dein.vim'

# ====================
# View, Colorscheme
# ====================
[[plugins]]
repo = 'phanviet/vim-monokai-pro'
[[plugins]]
repo = 'benjaminwhite/Benokai'
[[plugins]]
repo = 'jpo/vim-railscasts-theme'
[[plugins]]
repo = 'dracula/vim'
name = 'dracula'
[[plugins]]
repo = 'cocopon/iceberg.vim'
[[plugins]]
repo = 'vim-scripts/wombat256.vim'
[[plugins]]
repo = 'w0ng/vim-hybrid'
[[plugins]]
repo = 'oka-h/yozakura.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  " wombat始め、lightlineにはカラースキームがいくつかあるので要確認。
  let g:lightline = {
    \ 'colorscheme': 'wombat'
    \ }
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_auto_colors = 0
  let g:indent_guides_exclude_filetypes = ['help', 'vimfiler', 'terminal']
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['css', 'html', 'php']
hook_add = '''
  let g:user_emmet_settings = {
      \ 'lang' : 'ja',
      \ 'html' : {
      \   'filters' : 'html',
      \ },
      \ 'css' : {
      \   'filters' : 'fc',
      \ },
      \ 'php' : {
      \   'extends' : 'html',
      \   'filters' : 'html',
      \ },
      \}
  autocmd FileType html,css,scss,php imap <buffer><expr><tab>
      \ emmet#isExpandable() ? "\<plug>(emmet-expand-abbr)" :
      \ "\<tab>"
'''

# [[plugins]]
# repo ='Shougo/defx.nvim'
# hook_add = '''
# " defx vimfiler風設定 (http://takkii.hatenablog.com/category/NeoVim
# " defx Config: start -----------------
# autocmd FileType defx call s:defx_my_settings()
#   function! s:defx_my_settings() abort
#     " Define mappings
#      nnoremap <silent><buffer><expr> <CR>
#     \ defx#do_action('open')
#      nnoremap <silent><buffer><expr> c
#     \ defx#do_action('copy')
#      nnoremap <silent><buffer><expr> m
#     \ defx#do_action('move')
#      nnoremap <silent><buffer><xpr> p
#     \ defx#do_action('paste')
#      nnoremap <silent><buffer><expr> l
#     \ defx#do_action('open')
#      nnoremap <silent><buffer><expr> E
#     \ defx#do_action('open', 'vsplit')
#      nnoremap <silent><buffer><expr> P
#     \ defx#do_action('open', 'pedit')
#      nnoremap <silent><buffer><expr> K
#     \ defx#do_action('new_directory')
#      nnoremap <silent><buffer><expr> N
#     \ defx#do_action('new_file')
#      nnoremap <silent><buffer><expr> d
#     \ defx#do_action('remove')
#      nnoremap <silent><buffer><expr> r
#     \ defx#do_action('rename')
#      nnoremap <silent><buffer><expr> x
#     \ defx#do_action('execute_system')
#      nnoremap <silent><buffer><expr> yy
#     \ defx#do_action('yank_path')
#      nnoremap <silent><buffer><expr> .
#     \ defx#do_action('toggle_ignored_files')
#      nnoremap <silent><buffer><expr> h
#     \ defx#do_action('cd', ['..'])
#      nnoremap <silent><buffer><expr> ~
#     \ defx#do_action('cd')
#      nnoremap <silent><buffer><expr> q
#     \ defx#do_action('quit')
#      nnoremap <silent><buffer><expr> <Space>
#     \ defx#do_action('toggle_select') . 'j'
#      nnoremap <silent><buffer><expr> *
#     \ defx#do_action('toggle_select_all')
#      nnoremap <silent><buffer><expr> j
#     \ line('.') == line('$') ? 'gg' : 'j'
#      nnoremap <silent><buffer><expr> k
#     \ line('.') == 1 ? 'G' : 'k'
#      nnoremap <silent><buffer><expr> <C-l>
#     \ defx#do_action('redraw')
#      nnoremap <silent><buffer><expr> <C-g>
#     \ defx#do_action('print')
#      nnoremap <silent><buffer><expr> cd
#     \ defx#do_action('change_vim_cwd')
#   endfunction
# 
#   " ちょびっと開く
#   nnoremap fi :Defx `expand('%:p:h')` -search=`expand('%:p')` -toggle -show-ignored-files<CR>
#   nnoremap fe :Defx -split=vertical -winwidth=35 -toggle -show-ignored-files<CR>
# " defx Config: end -------------------
# '''

[[plugins]]
# コーディング記録
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'posva/vim-vue'
hook_source = 'autocmd FileType vue syntax sync fromstart'

[[plugins]]
# キーバインド連打補助
repo = 'kana/vim-submode'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
# 設定参考
# http://replicity.hateblo.jp/entry/2017/06/03/140731
repo = 'Shougo/denite.nvim'
if = 'has("python3")'
hook_add = '''
  nmap <Leader>d [denite]

  nnoremap <silent> [denite]y :<C-u>Denite neoyank<CR>
  nnoremap <silent> [denite]u :<C-u>Denite file_mru -mode=normal buffer<CR>
  " nnoremap <silent> [denite]b :<C-u>Denite buffer<CR>
  noremap [denite]b :Denite buffer<CR>
  nnoremap <silent> [denite]g :<C-u>Denite -auto_preview grep<CR>
  nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=+1 -immediately<CR>
  nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=-1 -immediately<CR>
'''
hook_post_source = '''
  " grepはagを使用
  call denite#custom#var('grep', 'command', ['ag'])
  " カレントディレクトリもagつかう
  call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])

  " mapping
  " denite終了
  "ESCキーでdeniteを終了
  call denite#custom#map('insert', '<esc>', '<denite:enter_mode:normal>', 'noremap')
  call denite#custom#map('normal', '<esc>', '<denite:quit>', 'noremap')
  "C-N,C-Pで上下移動
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
  "C-J,C-Kでsplitで開く
  call denite#custom#map('insert', '<C-j>', '<denite:do_action:split>', 'noremap')
  call denite#custom#map('insert', '<C-k>', '<denite:do_action:vsplit>', 'noremap')

  " denite開始
  " バッファ一覧
  noremap <C-P> :Denite buffer<CR>
  " ファイル一覧
  noremap <C-N> :Denite -buffer-name=file file<CR>
  " 最近使ったファイルの一覧
  noremap <C-Z> :Denite file_old<CR>
  " カレントディレクトリ
  noremap <C-C> :Denite file_rec<CR>
  "バッファ一覧
  nnoremap sB :<C-u>Denite buffer -buffer-name=file<CR>

  "Denite でバッファ内検索 
  nnoremap <silent> <Leader><C-f> :<C-u>Denite line<CR>
  nnoremap <silent> <expr><Space>l ":<C-u>DeniteWithCursorWord line<CR>"

  " プロンプトの左端に表示される文字を指定
  call denite#custom#option('default', 'prompt', '>')
  " deniteの起動位置をtopに変更
  call denite#custom#option('default', 'direction', 'top')
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
depends = 'denite.nvim'
on_path = '.*'

# [[plugins]]
# repo = 'Shougo/neoyank.vim'
# depends = 'denite.nvim'
# on_event = 'TextYankPost'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = 'let g:liaded_matchparen = 1'

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
# ヤンクしたときにカチッとする
repo = 'machakann/vim-highlightedyank'
hook_add = 'let g:highlightedyank_highlight_duration = 200'

[[plugins]]
# git on vim
repo = 'tpope/vim-fugitive'

# [[plugins]]
# repo = 'phpactor/phpactor'
# on_ft = ['php']
# build = 'composer install'

# hook_add = '''
#   " phpactor キーマップ : https://qiita.com/cyrt/items/ff5edd392b3f41dd6e10
#   " 画面を分割して定義元へのジャンプ
#   function! DefinitionJumpWithPhpactor()
#       split
#       call phpactor#GotoDefinition()
#   endfunction
# 
#   " useの補完
#   nmap <silent><Leader>u      :<C-u>call phpactor#UseAdd()<CR>
#   " コンテキストメニューの起動(カーソル下のクラスやメンバに対して実行可能な選択肢を表示してくれます)
#   nmap <silent><Leader>mm     :<C-u>call phpactor#ContextMenu()<CR>
#   " ナビゲーションメニューの起動(クラスの参照元を列挙したり、他ファイルへのジャンプなど)
#   nmap <silent><Leader>nn     :<C-u>call phpactor#Navigate()<CR>
#   " カーソル下のクラスやメンバの定義元にジャンプ
#   nmap <silent><Leader>o      :<C-u>call phpactor#GotoDefinition()<CR>
#   " 編集中のクラスに対し各種の変更を加える(コンストラクタ補完、インタフェース実装など)
#   nmap <silent><Leader>tt     :<C-u>call phpactor#Transform()<CR>
#   " 新しいクラスを生成する(編集中のファイルに)
#   nmap <silent><Leader>cc     :<C-u>call phpactor#ClassNew()<CR>
#   " 選択した範囲を変数に抽出する
#   nmap <silent><Leader>ee     :<C-u>call phpactor#ExtractExpression(v:false)<CR>
#   " 選択した範囲を変数に抽出する
#   vmap <silent><Leader>ee     :<C-u>call phpactor#ExtractExpression(v:true)<CR>
#   " 選択した範囲を新たなメソッドとして抽出する
#   vmap <silent><Leader>em     :<C-u>call phpactor#ExtractMethod()<CR>
#   " split → jump
#   nmap <silent><C-w><Leader>o :<C-u>call DefinitionJumpWithPhpactor()<CR>
#   " カーソル下のクラスや変数の情報を表示する
#   " 他のエディタで、マウスカーソルをおいたときに表示されるポップアップなどに相当
#   vmap <silent><Leader>hh     :<C-u>call phpactor#Hover()<CR>
# '''

# [[plugins]]
# repo = 'prabirshrestha/async.vim'

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# rev = 'next'
# build = 'bash install.sh'
# hook_source = '''
#   set hidden
#   let g:LanguageClient_serverCommands = {
#   \ 'php': ['php', $HOME.'/.composer/vendor/bin/php-language-server.php'],
#   \ }
#   let g:deoplete#enable_at_startup = 1
#   """ Key: K                | Action: Hover
#   """ Key: gd               | Action: go to definition
#   """ Key: f2               | Action: Rename
#   nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
#   nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
#   nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
# '''

# fuzzy finder系
# 参考: https://meteora.work/vim-dein-fzf
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  nnoremap <C-p> :<C-u>FZFFileList<CR>
  command! FZFFileList call fzf#run(fzf#wrap({
    \ 'source': 'find . -type d -name .git -prune -o ! -name .DS_Store',
    \ 'down': '40%'}))
'''

# # 作業中
# [[plugins]]
# # 参考：https://qiita.com/arwtyxouymz0110/items/b09ef1ed7a2f7bf1c5e6
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_i = 1
# hook_source = '''
#   call deoplete#enable()
#   " No display of the number of competion list
#   set shortmess+=c
#
#   " <TAB>: completion.
#   inoremap <silent><expr> <TAB>
#         \ pumvisible() ? "\<C-n>" :
#         \ <SID>check_back_space() ? "\<TAB>" :
#         \ deoplete#manual_complete()
#   function! s:check_back_space() abort
#     let col = col('.') - 1
#     return !col || getline('')[col - 1]  =~ '\s'
#   endfunction
#
#   " <S-TAB>: completion back.
#   inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
#   " <C-e>: popup cancel
#   inoremap <expr><C-e>       deoplete#cancel_popup()
#
#   call deoplete#custom#source('_', 'matchers', ['matcher_head'])
#   call deoplete#custom#source('_', 'converters', [
#         \ 'converter_remove_paren',
#         \ 'converter_remove_overlap',
#         \ 'matcher_length',
#         \ 'converter_truncate_abbr',
#         \ 'converter_truncate_menu',
#         \ 'converter_auto_delimiter',
#         \ ])
#   call deoplete#custom#option('keyword_patterns', {
#         \ '_': '[a-zA-Z_]\k*\(?',
#         \ 'tex': '[^\w|\s][a-zA-Z_]\w*',
#         \ })
#   call deoplete#custom#option('camel_case', v:true)
# '''

# not in services
[[plugins]]
repo = 'vim-scripts/open-browser.vim'
hook_add = '''
  " カーソル下のURLをブラウザで開く
  nmap <Leader>o <Plug>(openbrowser-open)
  vmap <Leader>o <Plug>(openbrowser-open)
  " ググる
  nnoremap <Leader>g :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>
'''


[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
build = './install.sh nightly'
